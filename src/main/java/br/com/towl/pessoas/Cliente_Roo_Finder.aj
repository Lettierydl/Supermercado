// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.towl.pessoas;

import br.com.towl.pessoas.Cliente;
import java.util.Calendar;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Cliente_Roo_Finder {
    
    public static TypedQuery<Cliente> Cliente.findClientesByCpfEquals(String cpf) {
        if (cpf == null || cpf.length() == 0) throw new IllegalArgumentException("The cpf argument is required");
        EntityManager em = Cliente.entityManager();
        TypedQuery<Cliente> q = em.createQuery("SELECT o FROM Cliente AS o WHERE o.cpf = :cpf", Cliente.class);
        q.setParameter("cpf", cpf);
        return q;
    }
    
    public static TypedQuery<Cliente> Cliente.findClientesByCpfLike(String cpf) {
        if (cpf == null || cpf.length() == 0) throw new IllegalArgumentException("The cpf argument is required");
        cpf = cpf.replace('*', '%');
        if (cpf.charAt(0) != '%') {
            cpf = "%" + cpf;
        }
        if (cpf.charAt(cpf.length() - 1) != '%') {
            cpf = cpf + "%";
        }
        EntityManager em = Cliente.entityManager();
        TypedQuery<Cliente> q = em.createQuery("SELECT o FROM Cliente AS o WHERE LOWER(o.cpf) LIKE LOWER(:cpf)", Cliente.class);
        q.setParameter("cpf", cpf);
        return q;
    }
    
    public static TypedQuery<Cliente> Cliente.findClientesByDataDeNascimentoBetween(Calendar minDataDeNascimento, Calendar maxDataDeNascimento) {
        if (minDataDeNascimento == null) throw new IllegalArgumentException("The minDataDeNascimento argument is required");
        if (maxDataDeNascimento == null) throw new IllegalArgumentException("The maxDataDeNascimento argument is required");
        EntityManager em = Cliente.entityManager();
        TypedQuery<Cliente> q = em.createQuery("SELECT o FROM Cliente AS o WHERE o.dataDeNascimento BETWEEN :minDataDeNascimento AND :maxDataDeNascimento", Cliente.class);
        q.setParameter("minDataDeNascimento", minDataDeNascimento);
        q.setParameter("maxDataDeNascimento", maxDataDeNascimento);
        return q;
    }
    
    public static TypedQuery<Cliente> Cliente.findClientesByNomeEquals(String nome) {
        if (nome == null || nome.length() == 0) throw new IllegalArgumentException("The nome argument is required");
        EntityManager em = Cliente.entityManager();
        TypedQuery<Cliente> q = em.createQuery("SELECT o FROM Cliente AS o WHERE o.nome = :nome", Cliente.class);
        q.setParameter("nome", nome);
        return q;
    }
    
    public static TypedQuery<Cliente> Cliente.findClientesByNomeLike(String nome) {
        if (nome == null || nome.length() == 0) throw new IllegalArgumentException("The nome argument is required");
        nome = nome.replace('*', '%');
        if (nome.charAt(0) != '%') {
            nome = "%" + nome;
        }
        if (nome.charAt(nome.length() - 1) != '%') {
            nome = nome + "%";
        }
        EntityManager em = Cliente.entityManager();
        TypedQuery<Cliente> q = em.createQuery("SELECT o FROM Cliente AS o WHERE LOWER(o.nome) LIKE LOWER(:nome)", Cliente.class);
        q.setParameter("nome", nome);
        return q;
    }
    
}
