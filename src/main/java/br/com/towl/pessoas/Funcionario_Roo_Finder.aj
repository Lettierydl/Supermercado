// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.towl.pessoas;

import br.com.towl.pessoas.Funcionario;
import br.com.towl.pessoas.TipoDeFuncionario;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Funcionario_Roo_Finder {
    
    public static TypedQuery<Funcionario> Funcionario.findFuncionariosByCpfEquals(String cpf) {
        if (cpf == null || cpf.length() == 0) throw new IllegalArgumentException("The cpf argument is required");
        EntityManager em = Funcionario.entityManager();
        TypedQuery<Funcionario> q = em.createQuery("SELECT o FROM Funcionario AS o WHERE o.cpf = :cpf", Funcionario.class);
        q.setParameter("cpf", cpf);
        return q;
    }
    
    public static TypedQuery<Funcionario> Funcionario.findFuncionariosByCpfLike(String cpf) {
        if (cpf == null || cpf.length() == 0) throw new IllegalArgumentException("The cpf argument is required");
        cpf = cpf.replace('*', '%');
        if (cpf.charAt(0) != '%') {
            cpf = "%" + cpf;
        }
        if (cpf.charAt(cpf.length() - 1) != '%') {
            cpf = cpf + "%";
        }
        EntityManager em = Funcionario.entityManager();
        TypedQuery<Funcionario> q = em.createQuery("SELECT o FROM Funcionario AS o WHERE LOWER(o.cpf) LIKE LOWER(:cpf)", Funcionario.class);
        q.setParameter("cpf", cpf);
        return q;
    }
    
    public static TypedQuery<Funcionario> Funcionario.findFuncionariosByNomeEquals(String nome) {
        if (nome == null || nome.length() == 0) throw new IllegalArgumentException("The nome argument is required");
        EntityManager em = Funcionario.entityManager();
        TypedQuery<Funcionario> q = em.createQuery("SELECT o FROM Funcionario AS o WHERE o.nome = :nome", Funcionario.class);
        q.setParameter("nome", nome);
        return q;
    }
    
    public static TypedQuery<Funcionario> Funcionario.findFuncionariosByNomeLike(String nome) {
        if (nome == null || nome.length() == 0) throw new IllegalArgumentException("The nome argument is required");
        nome = nome.replace('*', '%');
        if (nome.charAt(0) != '%') {
            nome = "%" + nome;
        }
        if (nome.charAt(nome.length() - 1) != '%') {
            nome = nome + "%";
        }
        EntityManager em = Funcionario.entityManager();
        TypedQuery<Funcionario> q = em.createQuery("SELECT o FROM Funcionario AS o WHERE LOWER(o.nome) LIKE LOWER(:nome)", Funcionario.class);
        q.setParameter("nome", nome);
        return q;
    }
    
    public static TypedQuery<Funcionario> Funcionario.findFuncionariosByTipoDeFuncionario(TipoDeFuncionario tipoDeFuncionario) {
        if (tipoDeFuncionario == null) throw new IllegalArgumentException("The tipoDeFuncionario argument is required");
        EntityManager em = Funcionario.entityManager();
        TypedQuery<Funcionario> q = em.createQuery("SELECT o FROM Funcionario AS o WHERE o.tipoDeFuncionario = :tipoDeFuncionario", Funcionario.class);
        q.setParameter("tipoDeFuncionario", tipoDeFuncionario);
        return q;
    }
    
}
