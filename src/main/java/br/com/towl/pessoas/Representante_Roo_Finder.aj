// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.towl.pessoas;

import br.com.towl.pessoas.Representante;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Representante_Roo_Finder {
    
    public static TypedQuery<Representante> Representante.findRepresentantesByNomeEquals(String nome) {
        if (nome == null || nome.length() == 0) throw new IllegalArgumentException("The nome argument is required");
        EntityManager em = Representante.entityManager();
        TypedQuery<Representante> q = em.createQuery("SELECT o FROM Representante AS o WHERE o.nome = :nome", Representante.class);
        q.setParameter("nome", nome);
        return q;
    }
    
    public static TypedQuery<Representante> Representante.findRepresentantesByNomeLike(String nome) {
        if (nome == null || nome.length() == 0) throw new IllegalArgumentException("The nome argument is required");
        nome = nome.replace('*', '%');
        if (nome.charAt(0) != '%') {
            nome = "%" + nome;
        }
        if (nome.charAt(nome.length() - 1) != '%') {
            nome = nome + "%";
        }
        EntityManager em = Representante.entityManager();
        TypedQuery<Representante> q = em.createQuery("SELECT o FROM Representante AS o WHERE LOWER(o.nome) LIKE LOWER(:nome)", Representante.class);
        q.setParameter("nome", nome);
        return q;
    }
    
    public static TypedQuery<Representante> Representante.findRepresentantesByRazaoSocialDaEmpresaEquals(String razaoSocialDaEmpresa) {
        if (razaoSocialDaEmpresa == null || razaoSocialDaEmpresa.length() == 0) throw new IllegalArgumentException("The razaoSocialDaEmpresa argument is required");
        EntityManager em = Representante.entityManager();
        TypedQuery<Representante> q = em.createQuery("SELECT o FROM Representante AS o WHERE o.razaoSocialDaEmpresa = :razaoSocialDaEmpresa", Representante.class);
        q.setParameter("razaoSocialDaEmpresa", razaoSocialDaEmpresa);
        return q;
    }
    
    public static TypedQuery<Representante> Representante.findRepresentantesByRazaoSocialDaEmpresaLike(String razaoSocialDaEmpresa) {
        if (razaoSocialDaEmpresa == null || razaoSocialDaEmpresa.length() == 0) throw new IllegalArgumentException("The razaoSocialDaEmpresa argument is required");
        razaoSocialDaEmpresa = razaoSocialDaEmpresa.replace('*', '%');
        if (razaoSocialDaEmpresa.charAt(0) != '%') {
            razaoSocialDaEmpresa = "%" + razaoSocialDaEmpresa;
        }
        if (razaoSocialDaEmpresa.charAt(razaoSocialDaEmpresa.length() - 1) != '%') {
            razaoSocialDaEmpresa = razaoSocialDaEmpresa + "%";
        }
        EntityManager em = Representante.entityManager();
        TypedQuery<Representante> q = em.createQuery("SELECT o FROM Representante AS o WHERE LOWER(o.razaoSocialDaEmpresa) LIKE LOWER(:razaoSocialDaEmpresa)", Representante.class);
        q.setParameter("razaoSocialDaEmpresa", razaoSocialDaEmpresa);
        return q;
    }
    
}
