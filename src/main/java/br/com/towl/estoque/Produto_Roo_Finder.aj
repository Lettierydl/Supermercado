// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.towl.estoque;

import br.com.towl.estoque.CategoriaProduto;
import br.com.towl.estoque.Produto;
import br.com.towl.pessoas.Representante;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Produto_Roo_Finder {
    
    public static TypedQuery<Produto> Produto.findProdutoesByCategoria(CategoriaProduto categoria) {
        if (categoria == null) throw new IllegalArgumentException("The categoria argument is required");
        EntityManager em = Produto.entityManager();
        TypedQuery<Produto> q = em.createQuery("SELECT o FROM Produto AS o WHERE o.categoria = :categoria", Produto.class);
        q.setParameter("categoria", categoria);
        return q;
    }
    
    public static TypedQuery<Produto> Produto.findProdutoesByCodigoDeBarrasLike(String codigoDeBarras) {
        if (codigoDeBarras == null || codigoDeBarras.length() == 0) throw new IllegalArgumentException("The codigoDeBarras argument is required");
        codigoDeBarras = codigoDeBarras.replace('*', '%');
        if (codigoDeBarras.charAt(0) != '%') {
            codigoDeBarras = "%" + codigoDeBarras;
        }
        if (codigoDeBarras.charAt(codigoDeBarras.length() - 1) != '%') {
            codigoDeBarras = codigoDeBarras + "%";
        }
        EntityManager em = Produto.entityManager();
        TypedQuery<Produto> q = em.createQuery("SELECT o FROM Produto AS o WHERE LOWER(o.codigoDeBarras) LIKE LOWER(:codigoDeBarras)", Produto.class);
        q.setParameter("codigoDeBarras", codigoDeBarras);
        return q;
    }
    
    public static TypedQuery<Produto> Produto.findProdutoesByDescricaoLike(String descricao) {
        if (descricao == null || descricao.length() == 0) throw new IllegalArgumentException("The descricao argument is required");
        descricao = descricao.replace('*', '%');
        if (descricao.charAt(0) != '%') {
            descricao = "%" + descricao;
        }
        if (descricao.charAt(descricao.length() - 1) != '%') {
            descricao = descricao + "%";
        }
        EntityManager em = Produto.entityManager();
        TypedQuery<Produto> q = em.createQuery("SELECT o FROM Produto AS o WHERE LOWER(o.descricao) LIKE LOWER(:descricao)", Produto.class);
        q.setParameter("descricao", descricao);
        return q;
    }
    
    public static TypedQuery<Produto> Produto.findProdutoesByFabricante(Representante fabricante) {
        if (fabricante == null) throw new IllegalArgumentException("The fabricante argument is required");
        EntityManager em = Produto.entityManager();
        TypedQuery<Produto> q = em.createQuery("SELECT o FROM Produto AS o WHERE o.fabricante = :fabricante", Produto.class);
        q.setParameter("fabricante", fabricante);
        return q;
    }
    
}
