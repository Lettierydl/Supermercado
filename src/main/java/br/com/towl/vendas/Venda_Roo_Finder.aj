// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.towl.vendas;

import br.com.towl.pessoas.Cliente;
import br.com.towl.pessoas.Funcionario;
import br.com.towl.vendas.FormaDePagamento;
import br.com.towl.vendas.Venda;
import java.util.Calendar;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Venda_Roo_Finder {
    
    public static TypedQuery<Venda> Venda.findVendasByCliente(Cliente cliente) {
        if (cliente == null) throw new IllegalArgumentException("The cliente argument is required");
        EntityManager em = Venda.entityManager();
        TypedQuery<Venda> q = em.createQuery("SELECT o FROM Venda AS o WHERE o.cliente = :cliente", Venda.class);
        q.setParameter("cliente", cliente);
        return q;
    }
    
    public static TypedQuery<Venda> Venda.findVendasByDiaBetween(Calendar minDia, Calendar maxDia) {
        if (minDia == null) throw new IllegalArgumentException("The minDia argument is required");
        if (maxDia == null) throw new IllegalArgumentException("The maxDia argument is required");
        EntityManager em = Venda.entityManager();
        TypedQuery<Venda> q = em.createQuery("SELECT o FROM Venda AS o WHERE o.dia BETWEEN :minDia AND :maxDia", Venda.class);
        q.setParameter("minDia", minDia);
        q.setParameter("maxDia", maxDia);
        return q;
    }
    
    public static TypedQuery<Venda> Venda.findVendasByDiaGreaterThanEquals(Calendar dia) {
        if (dia == null) throw new IllegalArgumentException("The dia argument is required");
        EntityManager em = Venda.entityManager();
        TypedQuery<Venda> q = em.createQuery("SELECT o FROM Venda AS o WHERE o.dia >= :dia", Venda.class);
        q.setParameter("dia", dia);
        return q;
    }
    
    public static TypedQuery<Venda> Venda.findVendasByFormaDePagamento(FormaDePagamento formaDePagamento) {
        if (formaDePagamento == null) throw new IllegalArgumentException("The formaDePagamento argument is required");
        EntityManager em = Venda.entityManager();
        TypedQuery<Venda> q = em.createQuery("SELECT o FROM Venda AS o WHERE o.formaDePagamento = :formaDePagamento", Venda.class);
        q.setParameter("formaDePagamento", formaDePagamento);
        return q;
    }
    
    public static TypedQuery<Venda> Venda.findVendasByFuncionario(Funcionario funcionario) {
        if (funcionario == null) throw new IllegalArgumentException("The funcionario argument is required");
        EntityManager em = Venda.entityManager();
        TypedQuery<Venda> q = em.createQuery("SELECT o FROM Venda AS o WHERE o.funcionario = :funcionario", Venda.class);
        q.setParameter("funcionario", funcionario);
        return q;
    }
    
}
